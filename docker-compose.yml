version: '3.9'

services:
  frontend:
    build: ./frontend_service
    restart: unless-stopped
    container_name: frontend
    env_file: ./frontend_service/.env
    ports:
      - "8080:8080"
    depends_on:
      - backend
    networks:
      - monitoring

  backend:
    build: ./backend_service
    restart: unless-stopped
    container_name: backend
    env_file: ./backend_service/.env
    ports:
      - "3001:3001"
    networks:
      - monitoring
    depends_on:
      - rabbitmq

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports:
      - "9100:9100"
    networks:
      - monitoring
  
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - monitoring

  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    container_name: rabbitmq
    hostname: rabbitmq
    networks:
      - monitoring
    ports:
      - "15672:15672"
      - "5672:5672"
  # rabbitmq_exporter:
  #   depends_on:
  #     - rabbitmq
  #   image: kbudde/rabbitmq-exporter
  #   container_name: rabbitmq-exporter
  #   network_mode: service:rabbitmq
  #   environment:
  #     RABBIT_URL: http://rabbitmq:15672
  #     RABBIT_USER: guest
  #     RABBIT_PASSWORD: guest
  #   networks:
  #     - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    restart: unless-stopped
    container_name: cadvisor
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro  
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8082
    networks:
      - monitoring
      
volumes:
  grafana-data:

networks:
  monitoring:
    driver: bridge

